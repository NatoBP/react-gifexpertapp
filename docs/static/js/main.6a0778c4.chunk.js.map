{"version":3,"sources":["Components/AddCategorie.js","helpers/getGifs.js","Components/GiffGridItem.js","Components/GiffGrid.js","hooks/useFetchGifs.js","GiffExpertApp.js","index.js"],"names":["AddCategorie","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GiffGridItem","className","src","alt","GiffGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GiffExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAe,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAuBA,OACI,sBAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACrCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SA1Bc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0DAE4CC,UAAUH,GAFtD,sDAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCCPO,EAAe,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGlC,OACI,sBAAKc,UAAY,yCAAjB,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IADxB,IAEI,4BAAKA,QCHJO,EAAW,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEvB,ECHwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAE/BqB,KAAM,GACNa,SAAS,IAHb,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OAnBAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAGFH,EAAS,CAELf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAKGqB,EDzByBK,CAAa1B,GAAhCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAGrB,OACI,qCACI,oBAAIJ,UAAY,oCAAhB,SAAqDhB,IAEpDoB,GAAW,mBAAGJ,UAAY,mCAAf,qBAEZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAAAC,GAAG,OAEV,aAFkB,CAEjB,EAAD,eAEQA,GADCA,EAAIC,aElBxBgB,EAAgB,WAEzB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAcA,cAAeA,IAG7B,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCVjC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.6a0778c4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport propTypes from 'prop-types';\n\nexport const AddCategorie = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState(''); //Le da un estado a la caja de texto\n    //El InputValue es el último valor actualizado de lo que la persona escribió\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    AddCategorie.propTypes = {\n        setCategories: propTypes.func.isRequired,\n    }\n\n    const handleSubmit = (e) => {\n\n        e.preventDefault(); //Previene la recarga del navegador\n        //console.log('Submit hecho')\n        \n        if(inputValue.trim().length > 2){\n\n            setCategories(cats =>[inputValue, ...cats]);\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\" //Establece el tipo de dato de entrada\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n","\nexport const getGifs = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=4SmEokhdlRVYLYKhiEm5GHO7aB881Mt4`\n    const resp = await fetch(url);\n\n    const { data } = await resp.json();\n    const gifs = data.map(img => {\n\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url, //El signo ? pregunta si hay algo y si no hay, no ejecuta el proceso\n        }\n    })\n\n    return gifs;\n\n}","import React from 'react'\n\nexport const GiffGridItem = ({ title, url }) => {\n\n    // console.log({ id, title, url });\n    return (\n        <div className = 'card animate__animated animate__bounce'>\n            <img src={url} alt={title} /> {/*Se establece la fuente y algún otro dato como el título*/}\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GiffGridItem } from './GiffGridItem';\n\n\nexport const GiffGrid = ({ category }) => {\n\n    const {data: images, loading} = useFetchGifs(category);\n    //Cpn los dos puntos ':' se puede renombrar la variable\n\n    return (\n        <>\n            <h3 className = 'animate__animated animate__fadeIn'>{category}</h3>\n            \n            {loading && <p className = 'animate__animated animate__flash'>Loading</p>}\n\n            <div className='card-grid'>\n\n                {\n                    images.map(img => (   //Se mapean las imagenes devueltas y se ponen los elementos en una lista\n\n                        <GiffGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n\n        </>\n\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs'\n\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n\n        data: [],\n        loading: true,\n\n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs => {\n\n\n                setState({\n\n                    data: imgs,\n                    loading: false,\n                });\n\n\n            })\n    }, [category]) //Se envía como segundo argumento un arreglo de dependencias. Si está vacío, la petición se ejecuta una sola vez\n    //Es el equivalente a ComponentDidMount\n\n\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategorie } from './Components/AddCategorie';\nimport { GiffGrid } from './Components/GiffGrid';\n\nexport const GiffExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategorie setCategories={setCategories} />\n            {/* Se pueden enviar propiedades a través de AddCategorie al archivo correspondiente */}\n\n            <ol>\n                {\n                    categories.map(category =>\n                        <GiffGrid\n                            key={category}\n                            category={category}\n                        />\n\n                    )\n                }\n\n            </ol>\n        </>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GiffExpertApp } from './GiffExpertApp';\nimport './index.css';\n\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GiffExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}